// app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import UserDropdownHydrated from "../components/UserDropdownHydrated";

const geistSans = Geist({ variable: "--font-geist-sans", subsets: ["latin"] });
const geistMono = Geist_Mono({ variable: "--font-geist-mono", subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type SpotProps = {
  size?: string;      // ej. "12vw"
  top?: string;       // ej. "10%"
  left?: string;      // ej. "10%"
  duration?: string;  // ej. "20s"
  delay?: string;     // ej. "-3s"
  src?: string;       // ej. "/watermarks/mark-1.png"
  opacity?: number;   // 0..1 (intensidad marca de agua)
};

// Círculo flotante con opción de imagen como "marca de agua"
function FloatingSpot({
  size = "12vw",
  top = "10%",
  left = "10%",
  duration = "20s",
  delay = "0s",
  src,
  opacity = 0.22,
}: SpotProps) {
  return (
    <div
      aria-hidden
      className="absolute rounded-full overflow-hidden pointer-events-none"
      style={{
        width: size,
        height: size,
        top,
        left,
        animation: `float ${duration} linear infinite`,
        animationDelay: delay,
        // Capa 1: degradado circular para conservar el “círculo”
        // Capa 2: imagen (si hay), mezclada en modo soft-light para efecto watermark
        backgroundImage: src
          ? `radial-gradient(circle at 50% 50%, rgba(255,255,255,.18) 0%, rgba(255,255,255,.10) 60%, rgba(255,255,255,.06) 100%), url(${src})`
          : `radial-gradient(circle at 50% 50%, rgba(255,255,255,.12) 0%, rgba(255,255,255,.06) 60%, rgba(255,255,255,.03) 100%)`,
        backgroundSize: src ? "cover, cover" : "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
        mixBlendMode: src ? "soft-light" : "normal",
        filter: src ? "grayscale(100%)" : undefined, // look de marca de agua
        opacity, // controla lo transparente
      }}
    />
  );
}

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="es">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <div className="min-h-screen w-full bg-gradient-to-br from-[#1a0a2e] via-[#0d324d] to-[#1d2671] overflow-visible relative">
          {/* Decorative Background */}
          <div className="fixed inset-0 z-0 pointer-events-none overflow-hidden">
            <FloatingSpot size="12vw" top="10%" left="10%" duration="20s" src="/nobg.png" opacity={0.2} />
            <FloatingSpot size="10vw" top="70%" left="85%" duration="15s" delay="-3s" src="/nobg.png" opacity={0.2} />
            <FloatingSpot size="7vw"  top="25%" left="80%" duration="12s" delay="-5s" src="/nobg.png" opacity={0.2} />
          </div>

          {/* Dropdown sólo si hay children (no 404) */}
          {children ? <UserDropdownHydrated /> : null}
          {children}
        </div>
      </body>
    </html>
  );
}
